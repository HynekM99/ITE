{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Login data: {'id': 2, 'username': 'Red', 'fullName': '?, ?, ?, ?', 'year': 2020, 'role': 'user', 'teamUUID': '34562142-a507-45dc-bff7-aa31aed932b3'}\n",
      "\n",
      "teamUUID: 34562142-a507-45dc-bff7-aa31aed932b3\n",
      "\n",
      "Sensors data: [{'id': 1, 'sensorUUID': 'df6021f7-3bdb-4ecb-9ccd-a0b50eeb141d', 'name': 'sensor1', 'location': 'Mikulasske namesti 1, Plzen', 'minTemperature': 0.0, 'maxTemperature': 25.0}]\n",
      "{'message': 'Forbidden'}\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "from json import dumps as dumps_json, loads as loads_json\n",
    "\n",
    "url_base = 'https://uvb1bb4153.execute-api.eu-central-1.amazonaws.com/Prod'\n",
    "headers_base = {'Content-Type': 'application/json'}\n",
    "\n",
    "# login\n",
    "url_login = url_base+'/login'\n",
    "body_login = {'username': 'Red', 'password': 'RX8u!dZQ'}\n",
    "\n",
    "login_data = loads_json(requests.post(url_login, data=dumps_json(body_login), headers=headers_base).text)\n",
    "print('\\nLogin data:', login_data)\n",
    "\n",
    "teamUUID = login_data['teamUUID']\n",
    "print('\\nteamUUID:', teamUUID)\n",
    "\n",
    "# get sensors\n",
    "url_sensors = url_base+'/sensors'\n",
    "headers_sensors = dict(headers_base)\n",
    "headers_sensors.update({'teamUUID': teamUUID})\n",
    "\n",
    "sensors_data = requests.get(url_sensors, headers=headers_sensors)\n",
    "print('\\nSensors data:', loads_json(sensors_data.text))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'message': 'Forbidden'}\n"
     ]
    }
   ],
   "source": [
    "#read all measurements\n",
    "sensors_data = loads_json(sensors_data.text)\n",
    "sensorUUID = sensors_data[0]['sensorUUID']\n",
    "url_measurements = url_base + 'measurements?sensorUUID='\n",
    "measurements_data = requests.get(url_measurements, params = {'sensorUUID': sensorUUID}, headers = {'teamUUID': teamUUID})\n",
    "print(loads_json(measurements_data.text))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Response [400]>"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#post measurements\n",
    "date = '2020-05-19T00:48:28'\n",
    "date = date+\"+00:00\"\n",
    "temperature = '25'\n",
    "body_measurements = {'createdOn': date,\n",
    "               'sensorUUID': sensorUUID,\n",
    "               'temperature': temperature,\n",
    "               'status': 'TEST'}\n",
    "url_post_measurements = url_base + '/measurements'\n",
    "requests.post(url_post_measurements,data = dumps_json(body_measurements), headers = headers_sensors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Response [400]>"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#post alert\n",
    "url_post_alert = url_base + '/alerts'\n",
    "highTemperature = sensors_data[0]['maxTemperature']\n",
    "lowTemperature = sensors_data[0]['minTemperature']\n",
    "temperature = '-1'\n",
    "body_alerts = {'createdOn': date,\n",
    "              'sensorUUID': sensorUUID,\n",
    "              'temperature': temperature,\n",
    "              'highTemperature': highTemperature,\n",
    "              'lowTemperature': lowTemperature}\n",
    "requests.post(url_post_alert, data = dumps_json(body_alerts), headers = headers_sensors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Content-Type': 'application/json',\n",
       " 'teamUUID': '34562142-a507-45dc-bff7-aa31aed932b3'}"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "headers_sensors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020-05-19T00:48:28+00:00\n"
     ]
    }
   ],
   "source": [
    "date = '2020-05-19T00:48:28'\n",
    "date = date+\"+00:00\"\n",
    "print(date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<Response [400]>\n"
     ]
    }
   ],
   "source": [
    "import datetime\n",
    "print(str(datetime.datetime.now()))\n",
    "str(datetime.datetime.now())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
